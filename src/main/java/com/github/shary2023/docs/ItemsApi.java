/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.shary2023.docs;

import com.github.shary2023.docs.model.BaseResponse;
import com.github.shary2023.docs.model.ItemResponseSchema;
import com.github.shary2023.docs.model.ItemSchema;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-04T17:19:25.781418200+06:00[Asia/Almaty]")
@Validated
@Tag(name = "items", description = "Methods available only to the administrator")
public interface ItemsApi {

    /**
     * POST /items : To rent.
     * Create the entity of the rented item.
     *
     * @param itemSchema  (optional)
     * @return A successful response to the creation of a new item. (status code 200)
     *         or User input error. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "createItem",
        summary = "To rent.",
        description = "Create the entity of the rented item.",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response to the creation of a new item.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/items",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ItemResponseSchema> createItem(
        @Parameter(name = "ItemSchema", description = "") @Valid @RequestBody(required = false) ItemSchema itemSchema
    );


    /**
     * POST /items/{id} : To rent.
     * Create a rented item (attach it to a tenant).
     *
     * @param id Item entity ID (item). (required)
     * @param ownerId ID of the Owner entity that rented the item. (required)
     * @return A successful response to the creation of a rented item. (status code 200)
     *         or User input error. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "createRentedItem",
        summary = "To rent.",
        description = "Create a rented item (attach it to a tenant).",
        tags = { "Public API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response to the creation of a rented item.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/items/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<ItemResponseSchema> createRentedItem(
        @Parameter(name = "id", description = "Item entity ID (item).", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @NotNull @Parameter(name = "ownerId", description = "ID of the Owner entity that rented the item.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ownerId", required = true) Long ownerId
    );


    /**
     * DELETE /items/{id} : Delete item.
     * Completely delete a thing from the application (including from the database).
     *
     * @param id Item entity ID (item). (required)
     * @return A successful response to deleting a thing. (status code 200)
     *         or User input error (status code 400)
     *         or The item with the specified ID was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "delete",
        summary = "Delete item.",
        description = "Completely delete a thing from the application (including from the database).",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response to deleting a thing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The item with the specified ID was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/items/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Boolean> delete(
        @Parameter(name = "id", description = "Item entity ID (item).", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /items/{id} : Get an item.
     * Get an item by its id.
     *
     * @param id Item entity ID (item). (required)
     * @return Successful response to finding a item. (status code 200)
     *         or User input error. (status code 400)
     *         or The item with the specified ID was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "getItemById",
        summary = "Get an item.",
        description = "Get an item by its id.",
        tags = { "Public API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to finding a item.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The item with the specified ID was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/items/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<ItemResponseSchema> getItemById(
        @Parameter(name = "id", description = "Item entity ID (item).", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * PUT /items/{id} : Return item.
     * Return the thing rented (untie it from the tenant).
     *
     * @param id Item entity ID (item). (required)
     * @param ownerId ID of the Owner entity that rented the item. (required)
     * @return Successful response to the return of the rented item. (status code 200)
     *         or User input error. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "returnRentedItem",
        summary = "Return item.",
        description = "Return the thing rented (untie it from the tenant).",
        tags = { "Public API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to the return of the rented item.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/items/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Boolean> returnRentedItem(
        @Parameter(name = "id", description = "Item entity ID (item).", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @NotNull @Parameter(name = "ownerId", description = "ID of the Owner entity that rented the item.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ownerId", required = true) Long ownerId
    );


    /**
     * PUT /items : Update item.
     * Update data about the item (for example, whether it is rented).
     *
     * @param itemSchema  (optional)
     * @return Successful response to update items. (status code 200)
     *         or User input error. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "updateItem",
        summary = "Update item.",
        description = "Update data about the item (for example, whether it is rented).",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to update items.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/items",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ItemResponseSchema> updateItem(
        @Parameter(name = "ItemSchema", description = "") @Valid @RequestBody(required = false) ItemSchema itemSchema
    );

}
