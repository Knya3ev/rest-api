/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.shary2023.docs;

import com.github.shary2023.docs.model.BaseResponse;
import com.github.shary2023.docs.model.CategoryResponseSchema;
import com.github.shary2023.docs.model.CategorySchema;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-04T17:19:25.781418200+06:00[Asia/Almaty]")
@Validated
@Tag(name = "categories", description = "Methods available only to the administrator")
public interface CategoriesApi {

    /**
     * POST /categories : Create a new item category.
     * Create a new category of things (for example, electronics).
     *
     * @param categorySchema  (optional)
     * @return Successful response to the creation of a new category. (status code 200)
     *         or User input error (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "create",
        summary = "Create a new item category.",
        description = "Create a new category of things (for example, electronics).",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to the creation of a new category.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CategoryResponseSchema> create(
        @Parameter(name = "CategorySchema", description = "") @Valid @RequestBody(required = false) CategorySchema categorySchema
    );


    /**
     * PUT /categories : Update category.
     * Change category name.
     *
     * @param categorySchema  (optional)
     * @return Successful response to a new category change. (status code 200)
     *         or User input error. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "update",
        summary = "Update category.",
        description = "Change category name.",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to a new category change.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CategoryResponseSchema> update(
        @Parameter(name = "CategorySchema", description = "") @Valid @RequestBody(required = false) CategorySchema categorySchema
    );

}
